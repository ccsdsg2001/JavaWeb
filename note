HTML 标签介绍:1.标签名大小写不敏感。2.标签分为1.基本属性：可以修改简单的样式结果 2.事件属性：可以直接设置事件响应后的代码
标签又分为单标签和双标签
常用标签介绍:
1.<font color显示颜色 face显示字体 size显示大小></font>

2.< 用&lt; >用 &gt; 表示   空格用&nbsp; 表示

3.标题标签:从<h1>到<h6>表示从大到小 align属性表示对齐属性 left左对齐 righe 右对齐 center 其中

4.超链接:在网页中可以点击的链接 <a>超链接
hred属性设置链接地址 target属性设置哪个目标进行跳转 self当前页面 blank新页面

5.列表标签 <ul>无序标签type属性可以修改列表项       <li>列表项 <ol>有序标签

6.img标签:可以在页面上显示图片<img>图片标签
src属性设置图片的路径 width属性设置图片的宽度 height属性设置图片的高度 border属性设置图片边框的大小 alt属性设置当前指定路径找不到图片时,用来替代的文本内容
 绝对路径:http://ip:port/工程名/资源路径 相对路径:.表示当前文件所在的目录 ..表示当前文件所在的上一级目录 文件名 表示当前文件所在目录的文件

7.表格标签:<table>是表格标签
border属性设置表格标签 width属性设置宽度 height属性设置长度 <b>标签是加粗标签 <tr>是行标签 <th>是表头标签 <td>是单元格标签
colsapn 属性设置跨列 rowspan 属性设置跨行

8.iframe标签:可以打开小窗口加载页面.<iframe>标签可以显示一个小页面.
和a标签组合组合使用:1.在iframe标签中使用name属性定义一个名称 2.在a标签的target属性上设置iframe的name的属性值 在<a>中定义target为iframe中的name

9.表单标签:<form>标签 表示一个表单 <input>标签
属性type  text是文本输入框 password为密码输入框 action属性设置提交得服务器地址 method属性设置提交的方式GET或POST  radio为单选框 reset为重置 submit为提交 file为文件上传 hidden为隐藏域(不需要用户参与,但依然发送给服务端) value为显示的文字 name属性可以对其分组 value默认值为一开始显示的内容 checked属性为checked表示默认选中
<Select>标签为下拉列表框 <option>标签为下拉列表框中的选项 selected属性为selected设置默认选中
<textarea>标签为多行文本输入框 rows属性设置显示几行的高度 cols属性设置每行可以显示几个字符宽度
表单提交的时候，数据没有发给服务端三种情况：1.表单没有name属性值 2单选复选（或下拉列表的option标签）都需要添加value属性 3.表单项不在提交的form标签中
GET请求特点：
1.浏览器地址栏中是action属性+请求参数 格式是：name=value&&name=value
2、不安全
3、他有数据长度的限制
POST请求的特点：
1、地址栏中只有action属性值
2.要安全
3.理论上没有数据长度的限制

10.<div>标签 默认独占一行 <span>标签 它的长度是封装数据的长度 <p>标签 默认会在段落上方或下方空出一行

CSS技术
CSS是层叠样式表单,是用于增强网页控制于页面分离的一种技术
语法规则: (选择器)p{
    (属性)font-size:80px(值)
}
选择器:决定受CSS样式影响的HTML元素 属性是你要改变的样式名,并且每个属性都有一个值.使用分号隔开
PS:每行建议只描述一个属性

CSS和HTML的结合方式
<style>标签专门用来定义css样式代码
第一种:在标签的style属性上设置"key:value value;",修改标签样式
第二种:在head标签中,使用style标签定义自己需要的css样式
格式如下:xxx{
    key:value value;
}
第三种:把css样式写成一个单独的css文件,通过link标签引入即可 <link>标签专门用来引入CSS代码

CSS选择器
标签名选择器
格式是:
标签名{
    属性:值;
}
标签名选择器,可以决定那些标签被动的使用这个样式

id选择器
格式是
#id属性值{
    属性:值;
}
id选择器,可以通过id属性选择性的去使用这个样式

class选择器
格式:
.class属性值{
    属性:值;
}
class类型选择性,可以通过class属性有效的选择性去使用这个样式

组合选择器
格式:
选择器1,选择器2,选择器n{
    属性:值
}

常用样式:

JAVAScript介绍
JS是弱类型，JAVA是强类型
弱类型是类型可变，强类型，就是定义变量的时候，类型以确定，而且不可变
特点：1.交互性2.安全性3.跨平台性
JavaScript和html代码的结合方式
第一种方式：只需要在head标签中，或者在body标签中，使用script标签来书写JavaScript代码
<script>标签 alert()是一个警告窗函数,它可以接受任意类型的参数,参数就是警告框的提示信息
第二种方式:使用<script>标签单独引入js src属性专门用来引入js文件路径

JS变量
变量类型:
数值类型:number
字符串类型:string
对象类型:object
布尔类型:Boolean
函数类型:function
特殊的值:undefined 未定义,所有js变量未赋值的时候都是undefined .null 空值 NAN 非数字,非数值

JS中定义的变量格式:
var 变量名;
var 变量名=值;
typeof()是js语言提供的一个函数,可以取变量的数据类型返回

关系运算:
等于:== 等于是简单的做字面值的比较
全等于:=== 除了做字面值的比较,还会比较两个量的数据类型

逻辑运算
且 && 或|| 取反!
在js中,所有的变量,都可以作为一个Boolean类型变量去使用.0,null,undefined,""空串都认为是false
&&且运算,两种情况:1.当表达式全为真的时候,返回最后一个表达式的值.2.当表达式中,有一个为假的时候,返回第一个为假的表达式的值
|| 或运算 两种情况:1.当表达式全为假时,返回最后一个表达式的值 2.只要有一个表达式为真,就返回第一个为真的表达式的值

数组
定义方式:
var 数组名=[];//空数组
var 数组名=[1,'cs',true]//定义数组同时辅助元素
js中的数组,只要我们通过数组下标赋值,那么最大的下标值,就会自动给数组做扩容操作

函数
两种定义方式
1.使用function关键字来定义函数,格式如下
function 函数名(形参列表){
    函数体
}
2.var 函数名 =function(形参列表){函数体}
在js中,定义返回值的函数直接表明return.js中函数不允许重载.会覆盖掉上一次定义
函数的arguments隐形参数(只在function内):在function中函数中不需要定义,可以直接用来获取所有参数的表量,如java中的可变长的参数public void fun(Object...args)
js中的隐形参数是一个数组,操作类型

js中的自定义对象
对象的定义:
var 变量名=new object() //对象实例 空对象
变量名.属性名=值;//定义一个属性
变量名.函数名=function(){}{}//定义一个函数
对象的访问:变量名.属性/函数名(){};
{}花括号形式的自定义对象:var 变量名={属性名:值//定义一个属性,分开  函数名:function(){} //定义一个函数};//空对象
对象的访问:变量名.属性/函数名();

js中的事件
事件是电脑输入设备和页面进行交互的相应
常用的事件:
onload 加载完成事件  页面加载完成之后,常用于做页面js代码初始化操作
onclick 单击事件    常用于按钮的点击相应事件
onblur 失去焦点事件   常用于输入框失去焦点后验证其输入内容是否合法
oncharge 内容发生改变事件 常用下拉框和输入框内容发生改变后操作
onsubmit 表单提交事件  常用于表单提交前,验证所有表单项是否合法

事件注册又分为静态注册和动态注册两种:
当事件相应后,要执行哪些操作代码,叫事件注册或事件绑定
静态注册事件:通过html标签的事件属性直接赋予事件相应后的代码,这种方式叫做静态注册
动态注册事件:先通过js代码得到标签的dom对象,再通过dom对象.事件名=function(){} 这种形式赋予事件响应后的代码,叫动态注册
动态注册基本步骤:1.获取标签对象 2.标签对象.事件名 =function(){}

onload事件
浏览器解析完页面后自动触发的事件
动态注册 window.onload =function(){};  //固定写法

onclick事件 点击
动态注册 window.onload =function(){}
1.获取标签对象 document.getElementById
2.通过标签对象.onclick =function(){}

onblur失去焦点事件
动态注册 window.onload =function(){
1.获取标签对象 var element =document.getElementById
2.通过标签对象.onblur =function(){}
}

oncharge 内容发生改变事件
动态注册 window.onload =function(){
1.获取标签对象 var element =document.getElementById
2.通过标签对象.onchange =function(){}
}

onsubmit事件
静态注册<form action="js.html" method="get" onsubmit="return onsubmtfun()"> return不能少
动态注册 window.onload =function(){
1.获取标签对象 var element =document.getElementById
2.通过标签对象.onsubmit =function(){
            return true/false;}//防止表单不合法
}

DOM模型
把文档中的标签，属性，文本，转换成为对象来管理
DOCUMENT对象
1.Document管理了所有的HTML文档内容
2.是一种树形状的结构
3.把所有标签对象化
4.通过document访问所有的标签对象

1.当要操作一个标签的时候,一定要获取这个标签对象
2.验证字符串符合规则,使用正则表达式技术
3.test()方法测试某个字符串. 匹配返回true 不匹配返回false


DOM对象的三个查询方法
document.getElementById()方法:返回拥有指定ID的第一个对象的引用
document.getElementByName():返回带有指定名称对象的集合,这个集合操作跟数组一样.集合的元素顺序是从上到下的顺序
document.getElementByTagName():按照标签名
PS:如果有ID属性,使用id方法,后Name,再TagName;以上方法,一定在页面加载完成之后,才能查询到标签对象

节点(标签对象)的常用属性和方法
getElementsByTagName():获取当前节点的指定标签名孩子节点
appendChild(oChildNode)方法:添加一个字节点,oChildNode就是添加的孩子节点
属性
childNodes:获取当前节点的所有字节点
firstChild:获取当前节点的第一个子节点
lastChild:获取当前节点的最后一个子节点
parentNode:获取当前节点的父节点
nextSibling:获取当前节点的下一个节点
previousSibling:获取当前节点的上一个节点
className:用于获取或设置标签的class属性值
innerHTML:获取设置起始标签和结束标签中的内容
innerText:表示获取设置起始标签和结束标签中的文本

JQuery(查询)
为按钮添加点击响应函数
$(function (){//相当于window.onload
		var $btnId = $("#btnId");//1.使用jQuery查询到标签对象
		$btnId.click(function (){//2,使用标签对象.click(function(){}
			alert("jquer");
		})

JQuery核心函数
核心函数的4个作用
传入参数为[函数]时：在文档加载完成后执行这个函数
    $(function (){
    })
传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象
    $("<div>\n" +
        "    <span>1</span>\n" +
        "    <span>2</span>\n" +
        "</div>").appendTo("body");
传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象.选择字符串为:1.id属性值时,根据id查询标签对象.2.标签名,根据标签名查找对象,3.类型选择器,根据class属性查询标签对象
    $("button")
传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回

JQuery对象和DOM对象使用区别
两者都不能使用对方的属性和方法

DOM对象和JQuery对象互转
1.dom对象转化为Jquery对象
(1)先有DOM对象(2)$(DOM对象)可以转换为jquery对象
2.JQuery对象转为dom对象
(1)先有jQuery对象(2)jQuery对象[下标]取出相应的DOM对象

JQuery基础选择器
基本选择器
#ID 根据ID查找标签对象
.class 根据class查找标签对象
element 根据标签名查找标签对象
* 表示任意的,所有的元素
selector1,selector2组合选择器:合并选择器1,选择器2的结果并返回

层级选择器
ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素
parent > child 子元素选择器：在给定的父元素下匹配所有的子元素
prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素
prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素

过滤选择器
:first 获取第一个元素
:last 获取最后个元素
:not(selector) 去除所有与给定选择器匹配的元素
:even 匹配所有索引值为偶数的元素，从 0 开始计数
:odd 匹配所有索引值为奇数的元素，从 0 开始计数
:eq(index) 匹配一个给定索引值的元素
:gt(index) 匹配所有大于给定索引值的元素
:lt(index) 匹配所有小于给定索引值的元素
:header 匹配如 h1, h2, h3 之类的标题元素
:animated 匹配所有正在执行动画效果的元

内容过滤器
:contains(text) 匹配包含给定文本的元素
:empty 匹配所有不包含子元素或者文本的空元素
:parent 匹配含有子元素或者文本的元素
:has(selector) 匹配含有选择器所匹配的元素的元素

属性过滤器
[attribute] 匹配包含给定属性的元素。
[attribute=value] 匹配给定的属性是某个特定值的元素
[attribute!=value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。
[attribute^=value] 匹配给定的属性是以某些值开始的元素
[attribute$=value] 匹配给定的属性是以某些值结尾的元素
[attribute*=value] 匹配给定的属性是以包含某些值的元素
[attrSel1][attrSel2][attrSelN] 复合属性选择器，需要同时满足多个条件时使用

表单过滤器
:input 匹配所有 input, textarea, select 和 button 元素
:text 匹配所有 文本输入框
:password 匹配所有的密码输入框
:radio 匹配所有的单选框
:checkbox 匹配所有的复选框
:submit 匹配所有提交按钮
:image 匹配所有 img 标签
:reset 匹配所有重置按钮
:button 匹配所有 input type=button <button>按钮
:file 匹配所有 input type=file 文件上传
:hidden 匹配所有不可见元素 display:none 或 input
:enabled 匹配所有可用元素
:disabled 匹配所有不可用元素
:checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象
:selected 匹配所有选中的 option

元素的筛选
eq() 获取给定索引的元素 功能跟 :eq() 一样
first() 获取第一个元素 功能跟 :first 一样
last() 获取最后一个元素 功能跟 :last 一样
filter(exp) 留下匹配的元素
is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true
has(exp) 返回包含有匹配选择器的元素的元素 功能跟 :has 一样
not(exp) 删除匹配选择器的元素 功能跟 :not 一样
children(exp) 返回匹配给定选择器的子元素 功能跟 parent>child 一样
find(exp) 返回匹配给定选择器的后代元素 功能跟 ancestor descendant 一样
next() 返回当前元素的下一个兄弟元素 功能跟 prev + next 功能一样
nextAll() 返回当前元素后面所有的兄弟元素 功能跟 prev ~ siblings 功能一样
nextUntil() 返回当前元素到指定匹配的元素为止的后面元素
parent() 返回父元素
prev(exp) 返回当前元素的上一个兄弟元素
prevAll() 返回当前元素前面所有的兄弟元素
prevUnit(exp) 返回当前元素到指定匹配的元素为止的前面元素
siblings(exp) 返回所有兄弟元素
add() 把 add 匹配的选择器的元素添加到当前 jquery

JQuery属性操作 [不传参数是获取,传递参数是设置]
html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。
text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。
val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一样
attr() 可以设置和获取属性的值,不推荐操作checked,readOnly,selected,disabled等
prop() 可以设置和获取属性的值,只推荐操作checked,readOnly,selected,disabled.

DOM的增删改
内部插入：
appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素
prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素
外部插入：
insertAfter() a.insertAfter(b) 得到 ba
insertBefore() a.insertBefore(b) 得到 ab
替换:
replaceWith() a.replaceWith(b) 用 b 替换掉 a
replaceAll() a.replaceAll(b) 用 a 替换掉所有 b
删除：
remove() a.remove(); 删除 a 标签
empty() a.empty(); 清空 a

CSS样式操作
addClass() 添加样式
removeClass() 删除样式
toggleClass() 有就删除,没有就添加样式
offset() 获取和设置元素的坐标

JQuery动画
基本动画
show() 将隐藏的元素显示
hide() 将可见的元素隐藏
toggle() 可见就隐藏,不可见就显示
以上方法都可以添加参数,第一个参数是动画执行时长,以毫秒为单位.第二个参数是动画的回调函数
fadein() 淡入
fadeout() 淡出
fadeto() 在指定时长内将透明度修改到指定的值
fadeToggle() 淡入/淡出

JQuery事件操作
$( function(){} );
和
window.onload = function(){}
的区别？
他们分别是在什么时候触发？
1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。
2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载
完成
他们触发的顺序？
1、jQuery 页面加载完成之后先执行
2、原生 js 的页面加载完成之后
他们执行的次数？
1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。
2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行

jQuery 中其他的事件处理方法：
click() 它可以绑定单击事件，以及触发单击事件
mouseover() 鼠标移入事件
mouseout() 鼠标移出事件
bind() 可以给元素一次性绑定一个或多个事件。
one() 使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。
unbind() 跟 bind 方法相反的操作，解除事件的绑定
live() 也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面动态创建出
来的也有效


事件的冒泡
什么是事件的冒泡？
事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去
响应。
那么如何阻止事件冒泡呢？
在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。
javaScript 事件对象
事件对象，是封装有触发的事件信息的一个 javascript 对象。
我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。
如何获取呢 javascript 事件对象呢？
在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，我们习惯取名为 event。
这个 event 就是

XML
XML 是可扩展的标记性语言。
XML的作用
1、用来保存数据，而且这些数据具有自我描述性
2、它还可以做为项目或者模块的配置文件
3、还可以做为网络传输数据的格式（现在 JSON 为主）。

XML语法
1. 文档声明。
2. 元素（标签）
3. xml 属性
4. xml 注释
5. 文本区域（CDATA 区）
dom4j解析技术
 //读取xml文件生成book类
 SAXReader saxReader = new SAXReader();
//通过Document对象获取根元素
Document read = saxReader.read("src/books.xml");
Element rootElement = read.getRootElement();
//通过根元素获取book标签对象
//element和elements通过标签名查找子元素
List<Element> book = rootElement.elements("book");
//遍历,
for(Element book1:book){
    //asxml()把标签对象转为字符串
    Element name = book1.element("name");
    //gettext():可以获取标签中的文本内容
    String text = name.getText();
    //直接获取指定标签中的文本内容
    String price = book1.elementText("price");
    System.out.println(price);

    new book("", "", "", "");
}

JavaWeb
什么是 JavaWeb
JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。
JavaWeb 是基于请求和响应来开发的。 b)什么是请求
请求是指客户端给服务器发送数据，叫请求 Request。 c)什么是响应
响应是指服务器给客户端回传数据，叫响应 Response。 d)请求和响应的关系
请求和响应是成对出现的，有请求就有响应

Web资源的分类
静态资源:html,css,js,txt,mp4,jpg
动态资源:jsp页面,Servlet程序

常用的web服务器
Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务
器），也是当前应用最广的 JavaWeb 服务器（免费）。
Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。
GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。
Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持，
性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。
WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，
而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。





p103








